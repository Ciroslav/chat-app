generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
  schemas  = ["messages", "user_management"]
}

model User {
  id                Int             @id @default(autoincrement())
  uuid              String          @unique
  username          String          @unique
  preferredUsername String?         @map("preferred_username")
  email             String          @unique
  country           String?
  address           String?
  phoneNumer        String?         @map("phone_number")
  passwordHash      String          @map("password_hash")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  lastActiveAt      DateTime?       @map("last_active_at")
  status            String          @default("ACTIVE")
  role              String          @default("USER")
  blockedList       BlockList[]     @relation("BlockedUser")
  blockedList2      BlockList[]     @relation("BlockingUser")
  friendList1       FriendList[]    @relation("FriendListUser1")
  friendList2       FriendList[]    @relation("FriendListUser2")
  senderRelations   UserRelations[] @relation("SenderRelations")
  receiverRelations UserRelations[] @relation("ReceiverRelations")
  sessions          UserSession[]

  @@map("users")
  @@schema("user_management")
}

model UserRelations {
  id           Int          @id @default(autoincrement())
  sender       String
  receiver     String
  type         RelationType @default(PENDING)
  createdAt    DateTime     @default(now()) @map("created_at")
  senderUser   User         @relation("SenderRelations", fields: [sender], references: [uuid], onDelete: Cascade)
  receiverUser User         @relation("ReceiverRelations", fields: [receiver], references: [uuid], onDelete: Cascade)

  @@map("user_relations")
  @@schema("user_management")
}

enum RelationType {
  PENDING
  FRIEND
  BLOCKED

  @@schema("user_management")
}

model UserSession {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  issuedAt       DateTime  @map("issued_at")
  expiresAt      DateTime  @map("expires_at")
  loginIpAddress String?   @map("login_ip_address")
  rtHash         String?   @map("rt_hash")
  role           String
  createdAt      DateTime  @default(now()) @map("created_at")
  lastAccessedAt DateTime? @map("last_accessed_at")
  user           User      @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  @@map("sessions")
  @@schema("user_management")
}

model FriendList {
  id         Int      @id @default(autoincrement())
  user1_uuid String
  user2_uuid String
  status     String   @default("PENDING")
  created_at DateTime @default(now())
  user1_rel  User     @relation("FriendListUser1", fields: [user1_uuid], references: [uuid])
  user2_rel  User     @relation("FriendListUser2", fields: [user2_uuid], references: [uuid])

  @@index([user1_uuid])
  @@index([user2_uuid])
  @@map("friend_list")
  @@schema("user_management")
}

model BlockList {
  id           Int      @id @default(autoincrement())
  user_uuid    String
  blocked_uuid String
  created_at   DateTime @default(now())
  blocked_rel  User     @relation("BlockedUser", fields: [blocked_uuid], references: [uuid])
  user_rel     User     @relation("BlockingUser", fields: [user_uuid], references: [uuid])

  @@map("block_list")
  @@schema("user_management")
}

model Conversation {
  id                  Int                        @id @default(autoincrement())
  creator             String
  createdAt           DateTime                   @default(now()) @map("created_at")
  public              Boolean?                   @default(false)
  conversations_users ConversationParticipants[]
  message             Message[]

  @@map("conversations")
  @@schema("messages")
}

model Message {
  id             Int          @id @default(autoincrement())
  author         String
  content        String
  attachmentUrl  String?      @map("attachment_url")
  conversationId Int          @map("conversation_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  pinned         Boolean      @default(false)
  deleted        Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@map("message")
  @@schema("messages")
}

model ConversationParticipants {
  id             Int          @id @default(autoincrement())
  user           String
  conversationId Int          @map("conversation_id")
  joinedAt       DateTime     @default(now()) @map("joined_at")
  leftAt         String?      @map("left_at")
  limitedAccess  Boolean?     @map("limited_access")
  accessSince    String?      @map("access_since")
  conversations  Conversation @relation(fields: [conversationId], references: [id])

  @@map("conversations_users")
  @@schema("messages")
}
