generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
  schemas  = ["messages", "user_management"]
}

model User {
  id                 Int           @id @default(autoincrement())
  uuid               String        @unique
  username           String        @unique
  preferred_username String?
  email              String        @unique
  country            String?
  address            String?
  phone_number       String?
  password_hash      String
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  last_active_at     DateTime?
  status             String        @default("ACTIVE")
  role               String        @default("USER")
  blockedList        BlockList[]   @relation("BlockedUser")
  blockedList2       BlockList[]   @relation("BlockingUser")
  friendList1        FriendList[]  @relation("FriendListUser1")
  friendList2        FriendList[]  @relation("FriendListUser2")
  sessions           UserSession[]

  @@map("users")
  @@schema("user_management")
}

model UserSession {
  id               Int       @id @default(autoincrement())
  user_id          String
  issued_at        DateTime
  expires_at       DateTime
  login_ip_address String?
  rt_hash          String?
  role             String
  created_at       DateTime  @default(now())
  last_accessed_at DateTime?
  user             User      @relation(fields: [user_id], references: [uuid], onDelete: Cascade)

  @@map("sessions")
  @@schema("user_management")
}

model FriendList {
  id         Int      @id @default(autoincrement())
  user1_uuid String
  user2_uuid String
  status     String   @default("PENDING")
  created_at DateTime @default(now())
  user1_rel  User     @relation("FriendListUser1", fields: [user1_uuid], references: [uuid])
  user2_rel  User     @relation("FriendListUser2", fields: [user2_uuid], references: [uuid])

  @@index([user1_uuid])
  @@index([user2_uuid])
  @@map("friend_list")
  @@schema("user_management")
}

model BlockList {
  id           Int      @id @default(autoincrement())
  user_uuid    String
  blocked_uuid String
  created_at   DateTime @default(now())
  blocked_rel  User     @relation("BlockedUser", fields: [blocked_uuid], references: [uuid])
  user_rel     User     @relation("BlockingUser", fields: [user_uuid], references: [uuid])

  @@map("block_list")
  @@schema("user_management")
}

model Conversation {
  id                  Int                        @id @default(autoincrement())
  creator             String
  created_at          DateTime                   @default(now())
  public              Boolean?                   @default(false)
  conversations_users ConversationParticipants[]
  Message             Message[]

  @@map("conversations")
  @@schema("messages")
}

model Message {
  id              Int          @id @default(autoincrement())
  author          String
  content         String
  attachment_url  String?
  conversation_id Int
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  pinned          Boolean      @default(false)
  deleted         Boolean      @default(false)
  conversation    Conversation @relation(fields: [conversation_id], references: [id])

  @@map("message")
  @@schema("messages")
}

model ConversationParticipants {
  id              Int          @id @default(autoincrement())
  user            String
  conversation_id Int
  joined_at       DateTime     @default(now())
  left_at         String?
  limited_access  Boolean?
  access_since    String?
  conversations   Conversation @relation(fields: [conversation_id], references: [id])

  @@map("conversations_users")
  @@schema("messages")
}
